{"version":3,"sources":["components/AddCommentForm/AddCommentForm.module.scss","components/ModuleWindow/ModuleWindow.module.scss","API/API.ts","store/imageModuleWindow.ts","components/AddCommentForm/AddCommentForm.tsx","components/ModuleWindow/ModuleWindow.tsx","store/imageReducer.ts","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","API","getImages","get","then","response","data","getImage","image_id","getComments","addComment","comment","post","name","initialState","imageSrc","isOpen","comments","isLoading","isFormSubmitting","imageModuleWindow","state","action","type","payload","setImageComments","changeIsOpenModuleWindow","changeIsFormLoading","AddCommentForm","dispatch","useDispatch","isSubmitting","useSelector","formik","useFormik","initialValues","description","enableReinitialize","onSubmit","values","a","setValues","validate","errors","className","s","handleSubmit","AddCommentForm__field","value","onChange","handleChange","placeholder","error","disabled","memo","ModuleWindow","imageId","useEffect","responseImage","src","responseComments","ModuleLayer","preloader","ModuleWindow__closeBtn","onClick","document","body","classList","remove","ModuleWindow__imgContainer","ModuleWindow__img","alt","ModuleWindow__comments","length","map","comment__name","comment__desc","id","images","imageReducer","changeIsLoading","App","ModuleWindowIsOpen","image","add","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","imagesReducer","imageModuleWindowReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f1f77fe1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddCommentForm\":\"AddCommentForm_AddCommentForm__xbLrl\",\"AddCommentForm__field\":\"AddCommentForm_AddCommentForm__field__2k-33\",\"error\":\"AddCommentForm_error__1COKd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ModuleLayer\":\"ModuleWindow_ModuleLayer__2n64X\",\"ModuleWindow\":\"ModuleWindow_ModuleWindow__1fA-D\",\"ModuleWindow__imgContainer\":\"ModuleWindow_ModuleWindow__imgContainer__1M0VC\",\"ModuleWindow__img\":\"ModuleWindow_ModuleWindow__img__1I0nQ\",\"ModuleWindow__comments\":\"ModuleWindow_ModuleWindow__comments__3wvMC\",\"comment\":\"ModuleWindow_comment__2Krd2\",\"comment__name\":\"ModuleWindow_comment__name__1ZbBY\",\"comment__desc\":\"ModuleWindow_comment__desc__1Vtcr\",\"preloader\":\"ModuleWindow_preloader__2na8e\",\"ModuleWindow__closeBtn\":\"ModuleWindow_ModuleWindow__closeBtn__2Vjt6\"};","import axios from 'axios';\r\nimport { addCommentType, commentType, imageSrcType, imageType } from '../types/types';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://tzfrontend.herokuapp.com/',\r\n})\r\n\r\nconst API = {\r\n    getImages() { // get all images\r\n        return instance.get<imageType[]>('images/').then(response => response.data)\r\n    },\r\n\r\n    getImage(image_id: number) { // get 1 image\r\n        return instance.get<imageSrcType>(`images/${image_id}/`).then(response => response.data)\r\n    },\r\n\r\n    getComments(image_id: number) {\r\n        return instance.get<commentType[]>(`comments/${image_id}/`).then(response => response.data)\r\n    },\r\n\r\n    addComment(comment: addCommentType) {\r\n        return instance.post('comments/add/', comment).then(response => response.data.name)\r\n    }\r\n}\r\n\r\nexport default API;","import { ThunkAction } from 'redux-thunk';\r\nimport { addCommentType, commentType, imageType } from '../types/types';\r\nimport API from './../API/API';\r\nimport { RootState } from './store';\r\n\r\nconst initialState = {\r\n    image_id: null as null | number,\r\n    imageSrc: '',\r\n    isOpen: false, //if true open ModuleWindow\r\n    comments: [] as commentType[],\r\n    isLoading: false,\r\n    isFormSubmitting: false,\r\n};\r\n\r\ntype actionsType = ReturnType<typeof setImageSrc> | ReturnType<typeof setImageComments>\r\n    | ReturnType<typeof changeIsOpenModuleWindow> | ReturnType<typeof changeIsLoading>\r\n    | ReturnType<typeof changeIsFormLoading>\r\n\r\nconst imageModuleWindow = (state = initialState, action: actionsType): typeof initialState => {\r\n    switch (action.type) {\r\n        case 'SET_IMAGE_SRC':\r\n            return {\r\n                ...state,\r\n                imageSrc: action.payload\r\n            };\r\n        case 'SET_IMAGE_COMMENTS':\r\n            return {\r\n                ...state,\r\n                comments: action.payload\r\n            }\r\n        case 'CHANGE_IS_OPEN':\r\n            return {\r\n                ...state,\r\n                image_id: action.image_id,\r\n                isOpen: action.isOpen,\r\n                isLoading: action.isOpen ? true : state.isLoading\r\n            }\r\n        case 'CHANGE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        case 'CHANGE_IS_FORM_SUBMITTING':\r\n            return {\r\n                ...state,\r\n                isFormSubmitting: action.isFormSubmitting\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default imageModuleWindow;\r\nexport const setImageSrc = (data: string) => ({ type: 'SET_IMAGE_SRC', payload: data } as const);\r\nexport const setImageComments = (data: commentType[]) => ({ type: 'SET_IMAGE_COMMENTS', payload: data } as const);\r\nexport const changeIsOpenModuleWindow = (isOpen: boolean, image_id: number | null) => ({ type: 'CHANGE_IS_OPEN', isOpen, image_id } as const);\r\nconst changeIsLoading = (isLoading: boolean) => ({ type: 'CHANGE_IS_LOADING', isLoading } as const);\r\nconst changeIsFormLoading = (isFormSubmitting: boolean) => ({ type: 'CHANGE_IS_FORM_SUBMITTING', isFormSubmitting } as const);\r\n\r\nexport const requestImageAndComments = (image_id: number): ThunkAction<void, RootState, unknown, actionsType> => {\r\n    return async (dispatch) => {\r\n        let responseImage = await API.getImage(image_id);\r\n        dispatch(setImageSrc(responseImage.src));\r\n        let responseComments = await API.getComments(image_id);\r\n        dispatch(setImageComments(responseComments));\r\n        dispatch(changeIsLoading(false))\r\n    }\r\n};\r\n\r\nexport const addComment = (comment: addCommentType): ThunkAction<void, RootState, unknown, actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(changeIsFormLoading(true))\r\n        await API.addComment(comment);\r\n        let response = await API.getComments(comment.image_id);\r\n        dispatch(setImageComments(response));\r\n        dispatch(changeIsFormLoading(false))\r\n    }\r\n};","import React, { memo, useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/store';\r\nimport { addComment } from '../../store/imageModuleWindow';\r\nimport s from './AddCommentForm.module.scss'\r\n\r\ninterface propsType {\r\n    image_id: number\r\n}\r\n\r\nconst AddCommentForm: React.FC<propsType> = ({image_id}) => {\r\n    const dispatch = useDispatch()\r\n    let isSubmitting = useSelector((state: RootState) => state.imageModuleWindow.isFormSubmitting)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            description: '',\r\n            image_id,\r\n        },\r\n        enableReinitialize: true,\r\n        onSubmit: values => {\r\n            dispatch(addComment(values));\r\n            formik.setValues({\r\n                name: '',\r\n                description: '',\r\n                image_id,\r\n            })\r\n        },\r\n        validate: values => {\r\n            const errors = {} as {name: string | null, description: string | null};\r\n\r\n            if (!values.name) {\r\n                errors.name = 'Required';\r\n              }\r\n            \r\n              if (!values.description) {\r\n                errors.description = 'Required';\r\n              }\r\n            \r\n              return errors;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <form className={s.AddCommentForm} onSubmit={formik.handleSubmit}>\r\n            <div className={s.AddCommentForm__field}>\r\n                <input type=\"text\" name='name' value={formik.values.name} onChange={formik.handleChange} placeholder='Ваше имя'/>\r\n\r\n                {formik.errors.name && \r\n                <div className={s.error}>\r\n                    {formik.errors.name}\r\n                </div>}\r\n\r\n            </div>\r\n\r\n            <div className={s.AddCommentForm__field}>\r\n                <input type=\"text\" name='description' value={formik.values.description} onChange={formik.handleChange} placeholder='Ваш комментарий'/>\r\n                \r\n                {formik.errors.description && \r\n                <div className={s.error}>\r\n                    {formik.errors.description}\r\n                </div>}\r\n\r\n            </div>\r\n\r\n            <button disabled={isSubmitting} type=\"submit\">\r\n                Оставить комментарий\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default memo(AddCommentForm);","import React, { memo, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeIsOpenModuleWindow, requestImageAndComments } from '../../store/imageModuleWindow';\r\nimport { requestImages } from '../../store/imageReducer';\r\nimport { RootState } from '../../store/store';\r\nimport AddCommentForm from '../AddCommentForm/AddCommentForm';\r\nimport s from './ModuleWindow.module.scss'\r\n\r\nconst ModuleWindow: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const imageId = useSelector((state: RootState) => state.imageModuleWindow.image_id)\r\n    const imageSrc = useSelector((state: RootState) => state.imageModuleWindow.imageSrc)\r\n    const comments = useSelector((state: RootState) => state.imageModuleWindow.comments)\r\n    const isLoading = useSelector((state: RootState) => state.imageModuleWindow.isLoading)\r\n\r\n    useEffect(() => {\r\n        if (imageId) {\r\n            dispatch(requestImageAndComments(imageId))\r\n        }\r\n    }, [imageId])\r\n\r\n    const closeModalWindow = () => {\r\n        document.body.classList.remove('lock')\r\n        dispatch(changeIsOpenModuleWindow(false, null))\r\n    }\r\n\r\n    return (\r\n        <div className={s.ModuleLayer}>\r\n            <div className={s.ModuleWindow}>\r\n                {isLoading\r\n                    ? <div className={s.preloader} />\r\n\r\n                    : <>\r\n                        <div className={s.ModuleWindow__closeBtn} onClick={closeModalWindow} />\r\n                        <div className={s.ModuleWindow__imgContainer}>\r\n                            <div className={s.ModuleWindow__img}>\r\n                                <img src={imageSrc} alt=\"\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={s.ModuleWindow__comments}>\r\n\r\n                            {comments.length > 0 && comments.map(comment =>\r\n                                <div className={s.comment} key={comment.id}>\r\n                                    {\r\n                                        // because API has not comment.date\r\n                                    }\r\n                                    <div className={s.comment__name}>\r\n                                        {comment.name}\r\n                                    </div>\r\n\r\n                                    <div className={s.comment__desc}>\r\n                                        {comment.description}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n\r\n                        </div>\r\n\r\n                        {imageId &&\r\n                            <AddCommentForm image_id={imageId} />\r\n                        }\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(ModuleWindow);","import { ThunkAction } from 'redux-thunk';\r\nimport { imageType } from '../types/types';\r\nimport API from './../API/API';\r\nimport { RootState } from './store';\r\n\r\nconst initialState = {\r\n    images: [] as imageType[],\r\n    isLoading: false\r\n};\r\n\r\ntype actionsType = ReturnType<typeof setImages> | ReturnType<typeof changeIsLoading>\r\n\r\nconst imageReducer = (state = initialState, action: actionsType): typeof initialState => {\r\n    switch (action.type) {\r\n        case 'SET_IMAGES':\r\n            return {\r\n                ...state,\r\n                images: action.payload\r\n            };\r\n        case 'SET_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default imageReducer;\r\nconst setImages = (data: imageType[]) => ({ type: 'SET_IMAGES', payload: data } as const);\r\nconst changeIsLoading = (isLoading: boolean) => ({type: 'SET_IS_LOADING', isLoading} as const)\r\n\r\nexport const requestImages = (): ThunkAction<void, RootState, unknown, actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(changeIsLoading(true));\r\n        let response = await API.getImages();\r\n        dispatch(setImages(response));\r\n        dispatch(changeIsLoading(false));\r\n    }\r\n};","import React, { memo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\nimport ModuleWindow from './components/ModuleWindow/ModuleWindow';\nimport { changeIsOpenModuleWindow } from './store/imageModuleWindow';\nimport { requestImages } from './store/imageReducer';\nimport { RootState } from './store/store';\n\nconst App = () => {\n    const dispatch = useDispatch()\n    const images = useSelector((state: RootState) => state.images.images)\n    const ModuleWindowIsOpen = useSelector((state: RootState) => state.imageModuleWindow.isOpen)\n    const isLoading = useSelector((state: RootState) => state.images.isLoading)\n\n    useEffect(() => {\n        dispatch(requestImages())\n    }, [])\n\n    const openModalWindow = (image_id: number) => {\n        document.body.classList.add('lock')\n        dispatch(changeIsOpenModuleWindow(true, image_id))\n    }\n\n    return (\n        <div className=\"App\">\n            {ModuleWindowIsOpen &&\n                <ModuleWindow />\n            }\n            <h1 className='title'>Test APP</h1>\n\n            {isLoading \n                ? <div className='preloader'/>\n\n                : <div className='main'>\n                    {images.map(image => \n                        <img key={image.image_id} src={image.src} alt=\"\" onClick={() => openModalWindow(image.image_id)}/>    \n                    )}\n                </div>\n            }\n\n            <div className='footer'>\n                <span>© 2018-2019</span>\n            </div>\n        </div>\n    );\n}\n\nexport default memo(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, createStore, combineReducers, compose } from 'redux';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport imagesReducer from './imageReducer';\r\nimport imageModuleWindowReducer from './imageModuleWindow'\r\n\r\nconst reducers = combineReducers({\r\n    images: imagesReducer,\r\n    imageModuleWindow: imageModuleWindowReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof reducers>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // ReduxDevTools for Chrome\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleWare)))\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store} >\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}