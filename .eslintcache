[{"C:\\Projects\\gallery\\src\\index.tsx":"1","C:\\Projects\\gallery\\src\\reportWebVitals.ts":"2","C:\\Projects\\gallery\\src\\store\\store.ts":"3","C:\\Projects\\gallery\\src\\App.tsx":"4","C:\\Projects\\gallery\\src\\store\\imageReducer.ts":"5","C:\\Projects\\gallery\\src\\store\\imageModuleWindow.ts":"6","C:\\Projects\\gallery\\src\\API\\API.ts":"7","C:\\Projects\\gallery\\src\\components\\ModuleWindow\\ModuleWindow.tsx":"8","C:\\Projects\\gallery\\src\\components\\AddCommentForm\\AddCommentForm.tsx":"9"},{"size":644,"mtime":1607608527004,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":644,"mtime":1607598225296,"results":"13","hashOfConfig":"11"},{"size":1563,"mtime":1607614838316,"results":"14","hashOfConfig":"11"},{"size":1297,"mtime":1607605954207,"results":"15","hashOfConfig":"11"},{"size":3103,"mtime":1607608329184,"results":"16","hashOfConfig":"11"},{"size":827,"mtime":1607604681661,"results":"17","hashOfConfig":"11"},{"size":2827,"mtime":1607614857604,"results":"18","hashOfConfig":"11"},{"size":2448,"mtime":1607612689877,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1itz0c8",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"C:\\Projects\\gallery\\src\\index.tsx",[],["43","44"],"C:\\Projects\\gallery\\src\\reportWebVitals.ts",[],"C:\\Projects\\gallery\\src\\store\\store.ts",[],"C:\\Projects\\gallery\\src\\App.tsx",["45"],"import React, { memo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\nimport ModuleWindow from './components/ModuleWindow/ModuleWindow';\nimport { changeIsOpenModuleWindow } from './store/imageModuleWindow';\nimport { requestImages } from './store/imageReducer';\nimport { RootState } from './store/store';\n\nconst App = () => {\n    const dispatch = useDispatch()\n    const images = useSelector((state: RootState) => state.images.images)\n    const ModuleWindowIsOpen = useSelector((state: RootState) => state.imageModuleWindow.isOpen)\n    const isLoading = useSelector((state: RootState) => state.images.isLoading)\n\n    useEffect(() => {\n        dispatch(requestImages())\n    }, [])\n\n    const openModalWindow = (image_id: number) => {\n        document.body.classList.add('lock')\n        dispatch(changeIsOpenModuleWindow(true, image_id))\n    }\n\n    return (\n        <div className=\"App\">\n            {ModuleWindowIsOpen &&\n                <ModuleWindow />\n            }\n            <h1 className='title'>Test APP</h1>\n\n            {isLoading \n                ? <div className='preloader'/>\n\n                : <div className='main'>\n                    {images.map(image => \n                        <img key={image.image_id} src={image.src} alt=\"\" onClick={() => openModalWindow(image.image_id)}/>    \n                    )}\n                </div>\n            }\n\n            <div className='footer'>\n                <span>Â© 2018-2019</span>\n            </div>\n        </div>\n    );\n}\n\nexport default memo(App);\n","C:\\Projects\\gallery\\src\\store\\imageReducer.ts",[],"C:\\Projects\\gallery\\src\\store\\imageModuleWindow.ts",["46"],"import { ThunkAction } from 'redux-thunk';\r\nimport { addCommentType, commentType, imageType } from '../types/types';\r\nimport API from './../API/API';\r\nimport { RootState } from './store';\r\n\r\nconst initialState = {\r\n    image_id: null as null | number,\r\n    imageSrc: '',\r\n    isOpen: false, //if true open ModuleWindow\r\n    comments: [] as commentType[],\r\n    isLoading: false,\r\n    isFormSubmitting: false,\r\n};\r\n\r\ntype actionsType = ReturnType<typeof setImageSrc> | ReturnType<typeof setImageComments>\r\n    | ReturnType<typeof changeIsOpenModuleWindow> | ReturnType<typeof changeIsLoading>\r\n    | ReturnType<typeof changeIsFormLoading>\r\n\r\nconst imageModuleWindow = (state = initialState, action: actionsType): typeof initialState => {\r\n    switch (action.type) {\r\n        case 'SET_IMAGE_SRC':\r\n            return {\r\n                ...state,\r\n                imageSrc: action.payload\r\n            };\r\n        case 'SET_IMAGE_COMMENTS':\r\n            return {\r\n                ...state,\r\n                comments: action.payload\r\n            }\r\n        case 'CHANGE_IS_OPEN':\r\n            return {\r\n                ...state,\r\n                image_id: action.image_id,\r\n                isOpen: action.isOpen,\r\n                isLoading: action.isOpen ? true : state.isLoading\r\n            }\r\n        case 'CHANGE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        case 'CHANGE_IS_FORM_SUBMITTING':\r\n            return {\r\n                ...state,\r\n                isFormSubmitting: action.isFormSubmitting\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default imageModuleWindow;\r\nexport const setImageSrc = (data: string) => ({ type: 'SET_IMAGE_SRC', payload: data } as const);\r\nexport const setImageComments = (data: commentType[]) => ({ type: 'SET_IMAGE_COMMENTS', payload: data } as const);\r\nexport const changeIsOpenModuleWindow = (isOpen: boolean, image_id: number | null) => ({ type: 'CHANGE_IS_OPEN', isOpen, image_id } as const);\r\nconst changeIsLoading = (isLoading: boolean) => ({ type: 'CHANGE_IS_LOADING', isLoading } as const);\r\nconst changeIsFormLoading = (isFormSubmitting: boolean) => ({ type: 'CHANGE_IS_FORM_SUBMITTING', isFormSubmitting } as const);\r\n\r\nexport const requestImageAndComments = (image_id: number): ThunkAction<void, RootState, unknown, actionsType> => {\r\n    return async (dispatch) => {\r\n        let responseImage = await API.getImage(image_id);\r\n        dispatch(setImageSrc(responseImage.src));\r\n        let responseComments = await API.getComments(image_id);\r\n        dispatch(setImageComments(responseComments));\r\n        dispatch(changeIsLoading(false))\r\n    }\r\n};\r\n\r\nexport const addComment = (comment: addCommentType): ThunkAction<void, RootState, unknown, actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(changeIsFormLoading(true))\r\n        await API.addComment(comment);\r\n        let response = await API.getComments(comment.image_id);\r\n        dispatch(setImageComments(response));\r\n        dispatch(changeIsFormLoading(false))\r\n    }\r\n};","C:\\Projects\\gallery\\src\\API\\API.ts",[],"C:\\Projects\\gallery\\src\\components\\ModuleWindow\\ModuleWindow.tsx",["47","48"],"import React, { memo, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeIsOpenModuleWindow, requestImageAndComments } from '../../store/imageModuleWindow';\r\nimport { requestImages } from '../../store/imageReducer';\r\nimport { RootState } from '../../store/store';\r\nimport AddCommentForm from '../AddCommentForm/AddCommentForm';\r\nimport s from './ModuleWindow.module.scss'\r\n\r\nconst ModuleWindow: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const imageId = useSelector((state: RootState) => state.imageModuleWindow.image_id)\r\n    const imageSrc = useSelector((state: RootState) => state.imageModuleWindow.imageSrc)\r\n    const comments = useSelector((state: RootState) => state.imageModuleWindow.comments)\r\n    const isLoading = useSelector((state: RootState) => state.imageModuleWindow.isLoading)\r\n\r\n    useEffect(() => {\r\n        if (imageId) {\r\n            dispatch(requestImageAndComments(imageId))\r\n        }\r\n    }, [imageId])\r\n\r\n    const closeModalWindow = () => {\r\n        document.body.classList.remove('lock')\r\n        dispatch(changeIsOpenModuleWindow(false, null))\r\n    }\r\n\r\n    return (\r\n        <div className={s.ModuleLayer}>\r\n            <div className={s.ModuleWindow}>\r\n                {isLoading\r\n                    ? <div className={s.preloader} />\r\n\r\n                    : <>\r\n                        <div className={s.ModuleWindow__closeBtn} onClick={closeModalWindow} />\r\n                        <div className={s.ModuleWindow__imgContainer}>\r\n                            <div className={s.ModuleWindow__img}>\r\n                                <img src={imageSrc} alt=\"\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={s.ModuleWindow__comments}>\r\n\r\n                            {comments.length > 0 && comments.map(comment =>\r\n                                <div className={s.comment} key={comment.id}>\r\n                                    {\r\n                                        // because API has not comment.date\r\n                                    }\r\n                                    <div className={s.comment__name}>\r\n                                        {comment.name}\r\n                                    </div>\r\n\r\n                                    <div className={s.comment__desc}>\r\n                                        {comment.description}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n\r\n                        </div>\r\n\r\n                        {imageId &&\r\n                            <AddCommentForm image_id={imageId} />\r\n                        }\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(ModuleWindow);","C:\\Projects\\gallery\\src\\components\\AddCommentForm\\AddCommentForm.tsx",["49"],"import React, { memo, useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/store';\r\nimport { addComment } from '../../store/imageModuleWindow';\r\nimport s from './AddCommentForm.module.scss'\r\n\r\ninterface propsType {\r\n    image_id: number\r\n}\r\n\r\nconst AddCommentForm: React.FC<propsType> = ({image_id}) => {\r\n    const dispatch = useDispatch()\r\n    let isSubmitting = useSelector((state: RootState) => state.imageModuleWindow.isFormSubmitting)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            description: '',\r\n            image_id,\r\n        },\r\n        enableReinitialize: true,\r\n        onSubmit: values => {\r\n            dispatch(addComment(values));\r\n            formik.setValues({\r\n                name: '',\r\n                description: '',\r\n                image_id,\r\n            })\r\n        },\r\n        validate: values => {\r\n            const errors = {} as {name: string | null, description: string | null};\r\n\r\n            if (!values.name) {\r\n                errors.name = 'Required';\r\n              }\r\n            \r\n              if (!values.description) {\r\n                errors.description = 'Required';\r\n              }\r\n            \r\n              return errors;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <form className={s.AddCommentForm} onSubmit={formik.handleSubmit}>\r\n            <div className={s.AddCommentForm__field}>\r\n                <input type=\"text\" name='name' value={formik.values.name} onChange={formik.handleChange} placeholder='ÐÐ°ÑÐµ Ð¸Ð¼Ñ'/>\r\n\r\n                {formik.errors.name && \r\n                <div className={s.error}>\r\n                    {formik.errors.name}\r\n                </div>}\r\n\r\n            </div>\r\n\r\n            <div className={s.AddCommentForm__field}>\r\n                <input type=\"text\" name='description' value={formik.values.description} onChange={formik.handleChange} placeholder='ÐÐ°Ñ ÐºÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸Ð¹'/>\r\n                \r\n                {formik.errors.description && \r\n                <div className={s.error}>\r\n                    {formik.errors.description}\r\n                </div>}\r\n\r\n            </div>\r\n\r\n            <button disabled={isSubmitting} type=\"submit\">\r\n                ÐÑÑÐ°Ð²Ð¸ÑÑ ÐºÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸Ð¹\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default memo(AddCommentForm);",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":17,"column":8,"nodeType":"56","endLine":17,"endColumn":10,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":39,"nodeType":"60","messageId":"61","endLine":2,"endColumn":48},{"ruleId":"58","severity":1,"message":"62","line":4,"column":10,"nodeType":"60","messageId":"61","endLine":4,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":20,"column":8,"nodeType":"56","endLine":20,"endColumn":17,"suggestions":"63"},{"ruleId":"58","severity":1,"message":"64","line":1,"column":23,"nodeType":"60","messageId":"61","endLine":1,"endColumn":32},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["67"],"@typescript-eslint/no-unused-vars","'imageType' is defined but never used.","Identifier","unusedVar","'requestImages' is defined but never used.",["68"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [dispatch]",{"range":"73","text":"74"},"Update the dependencies array to be: [dispatch, imageId]",{"range":"75","text":"76"},[730,732],"[dispatch]",[983,992],"[dispatch, imageId]"]