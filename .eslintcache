[{"C:\\Projects\\gallery\\src\\index.tsx":"1","C:\\Projects\\gallery\\src\\reportWebVitals.ts":"2","C:\\Projects\\gallery\\src\\store\\store.ts":"3","C:\\Projects\\gallery\\src\\App.tsx":"4","C:\\Projects\\gallery\\src\\store\\imageReducer.ts":"5","C:\\Projects\\gallery\\src\\store\\imageModuleWindow.ts":"6","C:\\Projects\\gallery\\src\\API\\API.ts":"7","C:\\Projects\\gallery\\src\\components\\ModuleWindow\\ModuleWindow.tsx":"8","C:\\Projects\\gallery\\src\\components\\AddCommentForm\\AddCommentForm.tsx":"9"},{"size":644,"mtime":1607608527004,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":644,"mtime":1607598225296,"results":"13","hashOfConfig":"11"},{"size":1563,"mtime":1607614838316,"results":"14","hashOfConfig":"11"},{"size":1297,"mtime":1607605954207,"results":"15","hashOfConfig":"11"},{"size":3103,"mtime":1607608329184,"results":"16","hashOfConfig":"11"},{"size":827,"mtime":1607604681661,"results":"17","hashOfConfig":"11"},{"size":2827,"mtime":1607614857604,"results":"18","hashOfConfig":"11"},{"size":2448,"mtime":1607612689877,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1itz0c8",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Projects\\gallery\\src\\index.tsx",[],["40","41"],"C:\\Projects\\gallery\\src\\reportWebVitals.ts",[],"C:\\Projects\\gallery\\src\\store\\store.ts",[],"C:\\Projects\\gallery\\src\\App.tsx",["42"],"C:\\Projects\\gallery\\src\\store\\imageReducer.ts",[],"C:\\Projects\\gallery\\src\\store\\imageModuleWindow.ts",["43"],"import { ThunkAction } from 'redux-thunk';\r\nimport { addCommentType, commentType, imageType } from '../types/types';\r\nimport API from './../API/API';\r\nimport { RootState } from './store';\r\n\r\nconst initialState = {\r\n    image_id: null as null | number,\r\n    imageSrc: '',\r\n    isOpen: false, //if true open ModuleWindow\r\n    comments: [] as commentType[],\r\n    isLoading: false,\r\n    isFormSubmitting: false,\r\n};\r\n\r\ntype actionsType = ReturnType<typeof setImageSrc> | ReturnType<typeof setImageComments>\r\n    | ReturnType<typeof changeIsOpenModuleWindow> | ReturnType<typeof changeIsLoading>\r\n    | ReturnType<typeof changeIsFormLoading>\r\n\r\nconst imageModuleWindow = (state = initialState, action: actionsType): typeof initialState => {\r\n    switch (action.type) {\r\n        case 'SET_IMAGE_SRC':\r\n            return {\r\n                ...state,\r\n                imageSrc: action.payload\r\n            };\r\n        case 'SET_IMAGE_COMMENTS':\r\n            return {\r\n                ...state,\r\n                comments: action.payload\r\n            }\r\n        case 'CHANGE_IS_OPEN':\r\n            return {\r\n                ...state,\r\n                image_id: action.image_id,\r\n                isOpen: action.isOpen,\r\n                isLoading: action.isOpen ? true : state.isLoading\r\n            }\r\n        case 'CHANGE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        case 'CHANGE_IS_FORM_SUBMITTING':\r\n            return {\r\n                ...state,\r\n                isFormSubmitting: action.isFormSubmitting\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default imageModuleWindow;\r\nexport const setImageSrc = (data: string) => ({ type: 'SET_IMAGE_SRC', payload: data } as const);\r\nexport const setImageComments = (data: commentType[]) => ({ type: 'SET_IMAGE_COMMENTS', payload: data } as const);\r\nexport const changeIsOpenModuleWindow = (isOpen: boolean, image_id: number | null) => ({ type: 'CHANGE_IS_OPEN', isOpen, image_id } as const);\r\nconst changeIsLoading = (isLoading: boolean) => ({ type: 'CHANGE_IS_LOADING', isLoading } as const);\r\nconst changeIsFormLoading = (isFormSubmitting: boolean) => ({ type: 'CHANGE_IS_FORM_SUBMITTING', isFormSubmitting } as const);\r\n\r\nexport const requestImageAndComments = (image_id: number): ThunkAction<void, RootState, unknown, actionsType> => {\r\n    return async (dispatch) => {\r\n        let responseImage = await API.getImage(image_id);\r\n        dispatch(setImageSrc(responseImage.src));\r\n        let responseComments = await API.getComments(image_id);\r\n        dispatch(setImageComments(responseComments));\r\n        dispatch(changeIsLoading(false))\r\n    }\r\n};\r\n\r\nexport const addComment = (comment: addCommentType): ThunkAction<void, RootState, unknown, actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(changeIsFormLoading(true))\r\n        await API.addComment(comment);\r\n        let response = await API.getComments(comment.image_id);\r\n        dispatch(setImageComments(response));\r\n        dispatch(changeIsFormLoading(false))\r\n    }\r\n};","C:\\Projects\\gallery\\src\\API\\API.ts",[],"C:\\Projects\\gallery\\src\\components\\ModuleWindow\\ModuleWindow.tsx",["44","45"],"C:\\Projects\\gallery\\src\\components\\AddCommentForm\\AddCommentForm.tsx",["46"],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":17,"column":8,"nodeType":"53","endLine":17,"endColumn":10,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":2,"column":39,"nodeType":"57","messageId":"58","endLine":2,"endColumn":48},{"ruleId":"55","severity":1,"message":"59","line":4,"column":10,"nodeType":"57","messageId":"58","endLine":4,"endColumn":23},{"ruleId":"51","severity":1,"message":"52","line":20,"column":8,"nodeType":"53","endLine":20,"endColumn":17,"suggestions":"60"},{"ruleId":"55","severity":1,"message":"61","line":1,"column":23,"nodeType":"57","messageId":"58","endLine":1,"endColumn":32},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["64"],"@typescript-eslint/no-unused-vars","'imageType' is defined but never used.","Identifier","unusedVar","'requestImages' is defined but never used.",["65"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [dispatch]",{"range":"70","text":"71"},"Update the dependencies array to be: [dispatch, imageId]",{"range":"72","text":"73"},[730,732],"[dispatch]",[983,992],"[dispatch, imageId]"]